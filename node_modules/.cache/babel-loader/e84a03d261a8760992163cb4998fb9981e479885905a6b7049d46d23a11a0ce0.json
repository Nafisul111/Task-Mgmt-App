{"ast":null,"code":"var _jsxFileName = \"/home/nafisul/Downloads/Frontend/my-app/src/components/NewMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '400px',\n  height: '400px'\n};\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\nfunction NewMap() {\n  _s();\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'YOUR_ACTUAL_GOOGLE_MAPS_API_KEY' // Replace with your actual Google Maps API key\n  });\n  const [map, setMap] = useState(null);\n  const [apiData, setApiData] = useState(null); // State to store data from your API\n\n  useEffect(() => {\n    if (isLoaded) {\n      // Fetch data from your API\n      const fetchData = async () => {\n        try {\n          const response = await fetch('https://secret-key-services-92086589662.us-central1.run.app/SecretKeys', {\n            method: 'GET',\n            // Or POST, depending on your API\n            headers: {\n              'Content-Type': 'application/json'\n            }\n\n            // If it's a POST request, you might need to include a body:\n            // body: JSON.stringify({ user: 'Admin', password: 'GenAI@7070' }),\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setApiData(data);\n            console.log(\"Data from your API:\", data);\n            // Now you can use this data to update your map\n          } else {\n            console.error('Failed to fetch data from your API:', response.status);\n          }\n        } catch (error) {\n          console.error('Error fetching data from your API:', error);\n        }\n      };\n      fetchData();\n    }\n  }, [isLoaded]);\n  const onLoad = useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds(center);\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  // Function to update the map based on apiData\n  const updateMapWithApiData = useCallback(() => {\n    if (map && apiData) {\n      // Example: If your API returns location data, you can add markers\n      // Assuming your API data has 'latitude' and 'longitude' properties\n      if (apiData.some(item => item.latitude && item.longitude)) {\n        apiData.forEach(item => {\n          new window.google.maps.Marker({\n            position: {\n              lat: item.latitude,\n              lng: item.longitude\n            },\n            map: map,\n            title: item.title || 'API Data Point'\n          });\n        });\n      }\n      // Add other map updates based on your API data here\n    }\n  }, [map, apiData]);\n  useEffect(() => {\n    updateMapWithApiData();\n  }, [updateMapWithApiData]);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(NewMap, \"Si/K01nOs6E1DtgyNsX6i+JgLkY=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = NewMap;\nexport default _c2 = /*#__PURE__*/React.memo(NewMap);\nvar _c, _c2;\n$RefreshReg$(_c, \"NewMap\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","useJsApiLoader","Fragment","_Fragment","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","NewMap","_s","isLoaded","id","googleMapsApiKey","map","setMap","apiData","setApiData","fetchData","response","fetch","method","headers","ok","data","json","console","log","error","status","onLoad","callback","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","updateMapWithApiData","some","item","latitude","longitude","forEach","Marker","position","title","mapContainerStyle","zoom","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["/home/nafisul/Downloads/Frontend/my-app/src/components/NewMap.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\n\nconst containerStyle = {\n    width: '400px',\n    height: '400px',\n};\n\nconst center = {\n    lat: -3.745,\n    lng: -38.523,\n};\n\nfunction NewMap() {\n    const { isLoaded } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: 'YOUR_ACTUAL_GOOGLE_MAPS_API_KEY', // Replace with your actual Google Maps API key\n    });\n\n    const [map, setMap] = useState(null);\n    const [apiData, setApiData] = useState(null); // State to store data from your API\n\n    useEffect(() => {\n        if (isLoaded) {\n            // Fetch data from your API\n            const fetchData = async () => {\n                try {\n                    const response = await fetch('https://secret-key-services-92086589662.us-central1.run.app/SecretKeys', {\n                        method: 'GET', // Or POST, depending on your API\n                        headers: {\n                            'Content-Type': 'application/json',\n                         },\n                         \n                        // If it's a POST request, you might need to include a body:\n                        // body: JSON.stringify({ user: 'Admin', password: 'GenAI@7070' }),\n                    });\n\n                    if (response.ok) {\n                        const data = await response.json();\n                        setApiData(data);\n                        console.log(\"Data from your API:\", data);\n                        // Now you can use this data to update your map\n                    } else {\n                        console.error('Failed to fetch data from your API:', response.status);\n                    }\n                } catch (error) {\n                    console.error('Error fetching data from your API:', error);\n                }\n            };\n\n            fetchData();\n        }\n    }, [isLoaded]);\n\n    const onLoad = useCallback(function callback(map) {\n        const bounds = new window.google.maps.LatLngBounds(center);\n        map.fitBounds(bounds);\n        setMap(map);\n    }, []);\n\n    const onUnmount = useCallback(function callback(map) {\n        setMap(null);\n    }, []);\n\n    // Function to update the map based on apiData\n    const updateMapWithApiData = useCallback(() => {\n        if (map && apiData) {\n            // Example: If your API returns location data, you can add markers\n            // Assuming your API data has 'latitude' and 'longitude' properties\n            if (apiData.some(item => item.latitude && item.longitude)) {\n                apiData.forEach(item => {\n                    new window.google.maps.Marker({\n                        position: { lat: item.latitude, lng: item.longitude },\n                        map: map,\n                        title: item.title || 'API Data Point',\n                    });\n                });\n            }\n            // Add other map updates based on your API data here\n        }\n    }, [map, apiData]);\n\n    useEffect(() => {\n        updateMapWithApiData();\n    }, [updateMapWithApiData]);\n\n    return isLoaded ? (\n        <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={center}\n            zoom={10}\n            onLoad={onLoad}\n            onUnmount={onUnmount}\n        >\n            {/* Child components, such as markers, info windows, etc. */}\n            <></>\n        </GoogleMap>\n    ) : (\n        <></>\n    );\n}\n\nexport default React.memo(NewMap);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}