{"ast":null,"code":"var _jsxFileName = \"/home/nafisul/Downloads/Frontend/my-app/src/components/NewMap.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '400px',\n  height: '400px'\n};\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\nfunction NewMap({\n  apiKey\n}) {\n  _s();\n  // Receive apiKey as a prop\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: apiKey // Use the prop\n  });\n  const [map, setMap] = useState(null);\n  const onLoad = useCallback(function callback(map) {\n    setMap(map);\n  }, []);\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error loading Google Maps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this);\n  }\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Google Maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(NewMap, \"0VGGKvUY2bzUcMrgO3paZLaLGX8=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = NewMap;\nfunction ParentComponent() {\n  _s2();\n  const [gMapAPikey, setGoogleMapsApiKey] = useState(null);\n  const fetchGoogleMapApiKey = useCallback(async () => {\n    try {\n      const response = await fetch('https://secret-key-services-92086589662.us-central1.run.app/SecretKeys', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"user\": \"Admin\",\n          \"password\": \"GenAI@7070\",\n          \"token\": \"GenAI-SecretKeys\"\n        })\n      });\n      if (response.ok) {\n        var _data$data, _data$data2;\n        const data = await response.json();\n        setGoogleMapsApiKey((_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data[\"Google Map Secret Key\"]);\n        // setApiDataFromSecretService(data.data); // Store the entire response if needed\n        console.log(\"Google Maps API Key:\", (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2[\"Google Map Secret Key\"]);\n      } else {\n        console.error('Failed to fetch API key:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching API key:', error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchGoogleMapApiKey();\n  }, [fetchGoogleMapApiKey]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [googleMapsApiKey && /*#__PURE__*/_jsxDEV(NewMap, {\n      apiKey: googleMapsApiKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 34\n    }, this), !googleMapsApiKey && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Google Maps...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_s2(ParentComponent, \"w24u2grgrVj5Jea9309obMdds3U=\");\n_c2 = ParentComponent;\nexport default _c3 = /*#__PURE__*/React.memo(ParentComponent);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"NewMap\");\n$RefreshReg$(_c2, \"ParentComponent\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","useJsApiLoader","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","NewMap","apiKey","_s","isLoaded","loadError","id","googleMapsApiKey","map","setMap","onLoad","callback","onUnmount","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","_c","ParentComponent","_s2","gMapAPikey","setGoogleMapsApiKey","fetchGoogleMapApiKey","response","fetch","method","headers","body","JSON","stringify","ok","_data$data","_data$data2","data","json","console","log","error","status","_c2","_c3","memo","$RefreshReg$"],"sources":["/home/nafisul/Downloads/Frontend/my-app/src/components/NewMap.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\n\nconst containerStyle = {\n    width: '400px',\n    height: '400px',\n};\n\nconst center = {\n    lat: -3.745,\n    lng: -38.523,\n};\n\nfunction NewMap({ apiKey }) { // Receive apiKey as a prop\n    const { isLoaded, loadError } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: apiKey, // Use the prop\n    });\n\n    const [map, setMap] = useState(null);\n\n    const onLoad = useCallback(function callback(map) {\n        setMap(map);\n    }, []);\n\n    const onUnmount = useCallback(function callback(map) {\n        setMap(null);\n    }, []);\n\n    if (loadError) {\n        return <div>Error loading Google Maps</div>;\n    }\n\n    return isLoaded ? (\n        <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={center}\n            zoom={10}\n            onLoad={onLoad}\n            onUnmount={onUnmount}\n        >\n    \n        </GoogleMap>\n    ) : (\n        <div>Loading Google Maps...</div>\n    );\n}\n\nfunction ParentComponent() {\n    const [gMapAPikey, setGoogleMapsApiKey] = useState(null);\n   \n\n    const fetchGoogleMapApiKey = useCallback(async () => {\n        try {\n            const response = await fetch('https://secret-key-services-92086589662.us-central1.run.app/SecretKeys', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    \"user\": \"Admin\",\n                    \"password\": \"GenAI@7070\",\n                    \"token\": \"GenAI-SecretKeys\"\n                })\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                setGoogleMapsApiKey(data.data?.[\"Google Map Secret Key\"]);\n                // setApiDataFromSecretService(data.data); // Store the entire response if needed\n                console.log(\"Google Maps API Key:\", data.data?.[\"Google Map Secret Key\"]);\n            } else {\n                console.error('Failed to fetch API key:', response.status);\n            }\n        } catch (error) {\n            console.error('Error fetching API key:', error);\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchGoogleMapApiKey();\n    }, [fetchGoogleMapApiKey]);\n\n    return (\n        <div>\n            {googleMapsApiKey && <NewMap apiKey={googleMapsApiKey} />}\n            {!googleMapsApiKey && <div>Loading Google Maps...</div>}\n        </div>\n    );\n}\n\nexport default React.memo(ParentComponent);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}